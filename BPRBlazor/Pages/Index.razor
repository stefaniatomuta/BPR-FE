@using BPR.Mediator.Services;
@using BPRBlazor.Components.Common
@using AutoMapper
@using BPR.Mediator.Interfaces
@using BPRBlazor.Components.ModelManagement
@using BPRBlazor.Services;
@inject IDependencyComponentService DependencyComponentService
@inject ICodebaseService CodebaseService
@inject IResultService ResultService
@inject IMapper Mapper
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@implements IDisposable

@page "/"

<LoadingIndicator @ref="_loadingIndicator" />

<div class="mb-5">
    <h3>Upload file containing source code</h3>
    <div class="d-flex gap-2 align-items-center">
        <label for="inputFile" class="btn btn-secondary">
            <InputFile id="inputFile" class="d-none" OnChange="LoadCodeSource" accept=@string.Join(", ", _allowedFileTypes) />
            Upload file
        </label>
        <a>@_uploadedFile?.Name</a>
    </div>
</div>

<div class="mb-5">
    <h3>Select rules to analyse against</h3>
    <SelectRuleComponent OnChange="HandleRule" />
</div>

@if (IsDependencyRuleChecked())
{
    <div class="mb-5">
        <h3>Select an architecture model</h3>
        <SelectArchitectureComponent ArchitectureModelChanged="HandleArchitectureModelOnChange" SelectedOption="@_selectedArchitectureViewModel?.Id" />
         @if (_selectedArchitectureViewModel is not null)
         {
             <div class="mt-1">
                <CreateEditArchitectureComponent ModelViewModel="@(_selectedArchitectureViewModel)" IsEditable="false"/>
             </div>
         }
    </div>

    <div class="row">
        <h3>Map namespaces according to the selected architectural model</h3>
        @if (_unmappedNamespaceComponents.Any())
        {
            <div class="col-4 mb-3">
                <h4>Unmapped namespaces:</h4>
                <div class="namespace-container" ondragover="return false;" @ondrop="() => HandleDrop()">
                    @foreach (var namespaceComponent in _unmappedNamespaceComponents)
                    {
                        <div class="namespace-component btn btn-danger" draggable="true" @ondragstart=@(() => HandleDragStart(namespaceComponent))>
                            <p>@namespaceComponent.Name</p>
                        </div>
                    }
                </div>
            </div>
        }
        @if (_selectedArchitectureViewModel is not null)
        {
            <div class="col mb-5">
                <h4>Architectural model</h4>
                @foreach (var component in _selectedArchitectureViewModel.Components)
                {
                    <div class="mt-3">
                        <h5>@component.Name</h5>
                        <div class="namespace-container" ondragover="return false;" @ondrop="() => HandleDrop(component)">
                            @foreach (var namespaceComponent in component.NamespaceComponents)
                            {
                                <div class="namespace-component btn btn-success" draggable="true" @ondragstart=@(() => HandleDragStart(namespaceComponent))>
                                    <p>@namespaceComponent.Name</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

<button class="btn btn-secondary" @onclick="StartAnalysisAsync" disabled="@_isStartAnalysisButtonDisabled">Start Analysis</button>
<p class="@_resultMessageCss my-2">@_resultMessage</p>
