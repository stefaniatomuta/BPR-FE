@using BPRBlazor.Components.Common;
@using BPR.Mediator.Services
@using BPR.Mediator.Interfaces
@using AutoMapper
@inject IJSRuntime JS
@inject IArchitectureModelService ArchitectureModelService
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<EditForm Model="ModelViewModel" OnValidSubmit="CreateOrEditArchitectureModel">
    @if (IsEditable)
    {
        <ObjectGraphDataAnnotationsValidator />
        <InputText class="form-control mb-2" placeholder="Model name..." @bind-Value="ModelViewModel.Name" />
        <ValidationMessage For="() => ModelViewModel.Name" />
        <button type="button" class="btn btn-secondary mb-2" @onclick="AddArchitectureComponent">Add component</button>
    }

    <div id ="boundary" class="draggable-boundary mb-2" ondragover="return false;" style="height: @(GetBottomPositionForComponents())px;" @ondrop="OnDropComponent">
        @foreach (var component in ModelViewModel.Components)
        {
            <div key="@component.Id" id="@component.Id" class="component" draggable="true" style="left: @(component.Position.X)px; top: @(component.Position.Y)px" @ondragstart="(e) => OnDragComponentStart(e, component)">
                @if (IsEditable)
                {
                    <div class="p-2">
                        <InputText 
                            style=@(component.Name.Length > 20 ? $"width: {component.Name.Length}ch": "width:100%")
                            oninput="if(this.value.length > 20) this.style.width = this.value.length + 'ch'; else this.style.width = '100%'" 
                            class="form-control text-center" 
                            placeholder="Name..." 
                            @bind-Value="component.Name"/>
                    </div>
                    <div class="d-flex p-2 justify-content-between">
                        <a class="btn @(component == _dependencyComponent ? "btn-success" : "btn-secondary") oi oi-arrow-right" @onclick="() => AddDependency(component)"></a>
                        <a class="btn btn-danger oi oi-trash" @onclick="() => RemoveArchitectureComponent(component)"></a>
                    </div>
                    <div class="d-flex flex-column gap-1">
                        <ValidationMessage For="() => component.Name"/>
                    </div>
                }
                else
                {
                    <label class="component-name">@component.Name</label>
                }
            </div>
            @foreach (var dependencyComponent in ModelViewModel.Components
                .Where(comp => component.Dependencies
                    .Select(dependency => dependency.Id)
                    .Contains(comp.Id)))
            {
                var startPosition = GetMiddlePositionForComponent(component);
                var endPosition = GetMiddlePositionForComponent(dependencyComponent);
                var dependency = component.Dependencies.First(dep => dep.Id == dependencyComponent.Id);
                <svg>
                    <defs class="svg-def">
                        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" />
                        </marker>
                        <marker id="redarrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto" fill="orangered">
                            <polygon points="0 0, 10 3.5, 0 7"/>
                        </marker>
                    </defs>
                    <polyline points="@(startPosition.X),@(startPosition.Y) @((startPosition.X + endPosition.X) / 2),@((startPosition.Y + endPosition.Y) / 2) @(endPosition.X),@(endPosition.Y)"
                              stroke="@(dependency.IsViolation ? "orangered" : "#000000")"
                              stroke-width="3"
                              marker-mid="url(@(dependency.IsViolation ? "#redarrowhead" : "#arrowhead"))"
                              stroke-dasharray="@(dependency.IsOpen ? 0 : 5)">
                    </polyline>
                </svg>
                @if (IsEditable)
                {
                    <div class="d-flex gap-1 dependency-options"
                         style="left: @((startPosition.X + endPosition.X) / 2 - 25)px; top: @((startPosition.Y + endPosition.Y) / 2 - 25)px">
                        <a class="btn btn-danger oi oi-trash" @onclick="() => RemoveDependency(component, dependencyComponent)"></a>
                        <a class="btn @ComponentDependencyTypeClass(dependency) oi oi-arrow-circle-right" @onclick="() => ToggleOpenness(dependency)"></a>
                    </div>
                }
            }
        }
    </div>
    <ValidationMessage For="() => ModelViewModel.Components" />
    @foreach (var message in _resultMessages)
    {
        <span class="@message.Class d-block">@message.Message</span>
    }
    @if (IsEditable)
    {
        <button type="submit" class="btn btn-secondary mb-2">Save model</button>
    }
</EditForm>

@if (IsEditable && ModelViewModel.Id != default)    
{
    <button class="btn btn-danger" @onclick="DeleteSelectedModel">Delete selected model</button>
}