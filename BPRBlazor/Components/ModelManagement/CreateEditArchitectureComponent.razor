@using BPRBlazor.Components.Common;
@using BPR.Mediator.Services
@using BPR.Mediator.Interfaces
@using AutoMapper
@inject IJSRuntime JS
@inject IDependencyService DependencyService
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<SvgArrowHead/>
<EditForm Model="ModelViewModel" OnValidSubmit="CreateOrEditArchitectureModel">
    <ObjectGraphDataAnnotationsValidator />
    <InputText class="form-control mb-2" placeholder="Model name..." @bind-Value="ModelViewModel.Name" />
    <ValidationMessage For="(() => ModelViewModel.Name)" />
    <button type="button" class="btn btn-secondary mb-2" @onclick="AddArchitecturalComponent">Add component</button>
    
    <div class="draggable-boundary mb-2" ondragover="return false;" @ondrop="OnDropComponent">
        @foreach (var component in ModelViewModel.Components)
        {
            var startPosition = GetMiddlePositionForComponent(component);
            <div key="@component.Id" id="@component.Id" class="component" draggable="true" style="left: @(component.Position.X)px; top: @(component.Position.Y)px" @ondragstart="((e) => OnDragComponentStart(e, component))">
                <div class="component-header mb-2">
                    <InputText class="form-control" placeholder="Name..." @bind-Value="component.Name"/>
                </div>
                <div class="d-flex flex-column p-2 gap-1">
                    <button type="button" class="btn @(component == _dependencyComponent ? "btn-success" : "btn-primary")" @onclick="(() => AddDependency(component))">
                        Dependency
                    </button>
                </div>
                <div class="d-flex flex-column p-2 gap-1">
                    <a class="btn btn-danger oi oi-trash w-100" @onclick="(() => RemoveArchitecturalComponent(component))"></a>
                    <ValidationMessage For="(() => component.Name)"/>
                </div>
            </div>
            @foreach (var dependencyComponent in ModelViewModel.Components
                .Where(comp => component.Dependencies
                    .Select(dependency => dependency.Id)
                    .Contains(comp.Id)))
            {
                var endPosition = GetMiddlePositionForComponent(dependencyComponent);
                var dependency = component.Dependencies.First(dep => dep.Id == dependencyComponent.Id);
                <svg>
                    @if (dependency.IsOpen)
                    {
                        <polyline points="@(startPosition.X),@(startPosition.Y) @((startPosition.X + endPosition.X) / 2),@((startPosition.Y + endPosition.Y) / 2) @(endPosition.X),@(endPosition.Y)"
                                  stroke="#000000"
                                  stroke-width="3"
                                  fill="none"
                                  marker-mid="url(#arrowhead)"
                                  stroke-dasharray="5">
                        </polyline>
                    }
                    else
                    {
                        <polyline points="@(startPosition.X),@(startPosition.Y) @((startPosition.X + endPosition.X) / 2),@((startPosition.Y + endPosition.Y) / 2) @(endPosition.X),@(endPosition.Y)"
                                  stroke="#000000"
                                  stroke-width="3"
                                  fill="none"
                                  marker-mid="url(#arrowhead)">
                        </polyline>
                    }
                </svg>
                <div class="d-flex gap-1 delete-dependency"
                     style="left: @((startPosition.X + endPosition.X) / 2 - 25)px; top: @((startPosition.Y + endPosition.Y) / 2 - 25)px">
                    <a class="btn btn-danger oi oi-trash" @onclick="(() => RemoveDependency(component, dependencyComponent))"></a>
                    <a class="btn @ComponentDependencyTypeClass(dependency) oi oi-arrow-circle-right w-100" @onclick="(() => ToggleOpenness(dependency))"></a>
                </div>
            }
        }
    </div>
    <ValidationMessage For="(() => ModelViewModel.Components)" />
    @foreach (var message in _resultMessages)
    {
        <span class="@message.Class d-block">@message.Message</span>
    }
    <button type="submit" class="btn btn-primary mb-2">Save model</button>
</EditForm>

@if (ModelViewModel.Id != default)
{
    <button class="btn btn-danger" @onclick="DeleteSelectedModel">Delete selected model</button>
}